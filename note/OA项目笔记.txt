//hibernate.cfg.xml中的配置
<mapping class="com.bkk.domian.User" />  			//基于注解annotation，直接注释在类名上面
<mapping resource="com/bkk/domain/User.hbm.xml" /> 	//基于配置文件，加载配置文件。
<property name="hbm2ddl.autp">true</property>		//排版SQL语句

基于annotation要创建Sessionfactory sf = new AnnotationConfiguration().configure().buildSessionfactory();
类名上加@Entity
@Table(name="_User")	//表名与类名不一致
@Column(name="_name")	//列名与属性名不一致
@Id 					//主键，加在get方法上

//取map中的key和value
<s:iterator value="#{1:'a', 2:'b', 3:'c'}" >
	<s:property value="key"/> | <s:property value="value"/> <br />
</s:iterator>
<s:iterator value="#{1:'a', 2:'b', 3:'c'}" var="x">
	<s:property value="#x.key"/> | <s:property value="#x.value"/> <br />
</s:iterator>

使用status:
<s:iterator value="{'aaa', 'bbb', 'ccc'}" status="status">
	<s:property/> | 
	遍历过的元素总数：<s:property value="#status.count"/> |
	遍历过的元素索引：<s:property value="#status.index"/> |
	当前是偶数？：<s:property value="#status.even"/> |
	当前是奇数？：<s:property value="#status.odd"/> |
	是第一个元素吗？：<s:property value="#status.first"/> |
	是最后一个元素吗？：<s:property value="#status.last"/>
	<br />
</s:iterator>


//把变量放入actionContext中
<s:set var="age"  value="#parameters.age[0]"/>
<s:if test="#age < 0">wrong age!</s:if>
<s:elseif test="#parameters.age[0] < 20">too young!</s:elseif>
<s:else>yeah!</s:else>


//struts2标签中可以使用静态方法
<constant name="struts.ognl.allowStaticMethodAccess" value="true"></constant>

//声明式异常处理 
<!-- 配置全局的Exception -->
<global-exception-mappings>
	<exception-mapping exception="java.lang.Exception" result="error_userState" />
</global-exception-mappings>

//时间类型格式
<s:date name="%{postTime}" format="yyyy-MM-dd HH:mm:ss"/>

//Set集合转换为Long[]数组
Long[] privilege = new Long[role.getPrivilege.size()];
int indx = 0;
for(Privilege privilege : role.getPrivilege()) {
	privilegeIds[index++] = privilege.getById();
}
//jquery全选
<input type="checkbox" onclick="$('[name=privilege]').attr('checked',this.checked)" id="cbAll">
<label for="cbAll">全选<label>
//单选checkbox回显
<input type="checkbox" name="privilegeIds" value="${id}" id="cb_${id}"
	<s:property value="%{id in privilegeIds ? 'checked' : ''}"/>
<label for="cd_${id}">${name}</label>

${pageContext.request.contextPath}  //jsp页面中拿到Web-Root路径

String z = new String(zone.getBytes("ISO-8859-1"), "UTF-8");
String fileName = URLEncoder.encode(applicationTemplate.getName(), "utf-8"); // 方法一
String fileName = new String(applicationTemplate.getName().getBytes("gbk"), "iso8859-1"); // 方法二

onclick="return window.confirm('您确定要初始化密码为1234吗？')"

userAdd.jsp中---------
岗位add
<s:select name="roleIds" multiple="true" size="10" list="#roleList" listKey="id" listValue="name"></s:select> 按住Ctrl键可以多选或取消选择

部门add
<s:select name="departmentId" list="#departmentList" listKey="id" listValue="name" headerKey="" headerValue="请选择部门"></s:select>

userAction中---------
岗位add
private Long[] roleIds;  //生成get、set方法，接受前台传来的数据
List<Role> roleList = roleService.getByIds(roleIds);
model.setRoles(new HashSet<Role>(roleList));
userService.save(model);

部门add
private Long departmentId;  //生成get、set方法，接受前台传来的数据
Department department = departmentService.getById(departmentId);
model.setDepartment(department);
userService.save(model);

修改和添加页面save.jsp---------
<s:form action="userAction_%{id == null ? 'add' : 'edit'}">
	<s:hidden name="id"></s:hidden>

<s:radio name="gender" list="%{{'男', '女'}}"></s:radio>

IF判断------------
<s:if test="#parent != null">
	<s:a action="departmentAction_list?parentId=%{#parent.parent.id}">返回上一级</s:a>
</s:if>
------------------------------------------------------------------------
ActionContext.getContext().put("key",value);			//放到值栈map中
ActionContext.getContext().getValueStack().push(role);  // 放到栈顶，先找栈再找map
-------------------------------------------------------------------------
模板：
	多对一：
		<many-to-one name="" class="" column=""></many-to-one>
	一对多：
		<set name="">
			<key column=""></key>
			<one-to-many class=""/>
		</set>
	多对多：
		<set name="" table="">
			<key column=""></key>
			<many-to-many class="" column=""></many-to-many>
		</set>
----------------------------------------------------------------------------		
		请求数	地址栏
转发	  1		不变
重定向	  2		变
----------------------------------------------------------------------------
  作用		方法名		返回值		页面

列表		list()		list		list.jsp
删除		delete()	toList
添加页面	addUI()		addUI		addUI.jsp
添加		add()		toList
修改页面	editUI()	editUI		editUI.jsp
修改		edit()		toList

toList的结果配置：
<result name="toList" type="redirectAction">roleAction_list</result>
------------------------------------------------------------------------------
格式：
EL表达式:		JSP中
	${表达式}
OGNL表达式:		Strtus2中（Struts2的自定义标签中、struts.xml...）
	Struts2的自定义标签的属性值中	%{表达式}
	struts.xml中					${表达式}
	语法：
		%{name}取值栈中的值
 　		%{#name}取值栈中Map中的值
 　　	%{#user.name}取值栈中Map中的值
 　　	#{'k':'v', 'k2':'v2'}定义一个Map
 　　	{'e1', 'e2'}定义一个List
 
  　　	%{ #{'k':'v', 'k2':'v2'} }Struts2的自定义标签的属性值中 定义一个Map
---------------------------------------------------------------------------------
语法说明：
	方式一：
		CASE value WHEN [compare_value] THEN result [WHEN [compare_value] THEN result ...] [ELSE result] END 
	方式二：
		CASE WHEN [condition] THEN result [WHEN [condition] THEN result ...] [ELSE result] END 



使用示例：

mysql> select id,name, (gender) as '性别' from itcast_user;
+----+------------+------+
| id | name       | 性别 |
+----+------------+------+
| 19 | 张三       | 1    |
| 20 | 小红       | 2    |
| 21 | 超级管理员 |      |
+----+------------+------+
3 rows in set (0.00 sec)

mysql> select id,name, (CASE gender WHEN 1 THEN '男' WHEN 2 THEN '女' ELSE '其他' END) as '性别' from itcast_user;
+----+------------+------+
| id | name       | 性别 |
+----+------------+------+
| 19 | 张三       | 男   |
| 20 | 小红       | 女   |
| 21 | 超级管理员 | 其他 |
+----+------------+------+
3 rows in set (0.00 sec)

mysql> select id,name, (CASE WHEN gender=1 THEN '男' WHEN gender=2 THEN '女' ELSE '其他' END) as '性别' from itcast_user;
+----+------------+------+
| id | name       | 性别 |
+----+------------+------+
| 19 | 张三       | 男   |
| 20 | 小红       | 女   |
| 21 | 超级管理员 | 其他 |
+----+------------+------+
3 rows in set (0.00 sec)
====================================================================================================